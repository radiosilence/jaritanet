name: 🎵 Update Navidrome Version

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  update-navidrome:
    name: 🎵 Update Navidrome
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: 🔍 Check for Navidrome Updates
        run: |
          set -e
          
          CONFIG_PATH="packages/k8s/Pulumi.main.yaml"
          REPO="deluan/navidrome"
          SERVICE_NAME="navidrome"
          
          echo "Checking for updates to $REPO for service $SERVICE_NAME"
          
          # Fetch latest release from GitHub API
          echo "Fetching latest release from GitHub..."
          LATEST_RELEASE=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$REPO/releases/latest")
          
          # Extract tag name from JSON response
          LATEST_VERSION=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
          
          if [[ -z "$LATEST_VERSION" || "$LATEST_VERSION" == "null" ]]; then
            echo "Error: Could not fetch latest version from GitHub API"
            echo "Response: $LATEST_RELEASE"
            exit 1
          fi
          
          # Store original version for commit message
          GITHUB_VERSION="$LATEST_VERSION"
          
          # Strip 'v' prefix for Docker image tag
          LATEST_VERSION="${LATEST_VERSION#v}"
          
          echo "Latest GitHub version: $GITHUB_VERSION"
          echo "Latest Docker version: $LATEST_VERSION"
          
          # Get current version from config file
          if [[ ! -f "$CONFIG_PATH" ]]; then
            echo "Error: Config file $CONFIG_PATH not found"
            exit 1
          fi
          
          # Extract current version using yq
          CURRENT_VERSION=$(yq eval '.config["jaritanet-k8s:services"][] | select(.name == "'$SERVICE_NAME'") | .args.image.tag' "$CONFIG_PATH")
          
          if [[ -z "$CURRENT_VERSION" ]]; then
            echo "Error: Could not find current version for service $SERVICE_NAME in $CONFIG_PATH"
            exit 1
          fi
          
          echo "Current version: $CURRENT_VERSION"
          
          # Compare versions
          if [[ "$CURRENT_VERSION" == "$LATEST_VERSION" ]]; then
            echo "Already up to date. No changes needed."
            exit 0
          fi
          
          echo "Update available: $CURRENT_VERSION -> $LATEST_VERSION"
          
          # Update the version in config file
          yq eval '(.config["jaritanet-k8s:services"][] | select(.name == "'$SERVICE_NAME'") | .args.image.tag) = "'$LATEST_VERSION'"' -i "$CONFIG_PATH"
          
          # Verify the change was made
          NEW_VERSION=$(yq eval '.config["jaritanet-k8s:services"][] | select(.name == "'$SERVICE_NAME'") | .args.image.tag' "$CONFIG_PATH")
          
          if [[ "$NEW_VERSION" != "$LATEST_VERSION" ]]; then
            echo "Error: Failed to update version in config file"
            exit 1
          fi
          
          # Set outputs for commit step
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          echo "GITHUB_VERSION=$GITHUB_VERSION" >> $GITHUB_ENV
          echo "VERSION_UPDATED=true" >> $GITHUB_ENV

      - name: 🚀 Commit and Push Changes
        if: env.VERSION_UPDATED == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add packages/k8s/Pulumi.main.yaml
          git commit -m "chore: update navidrome from ${{ env.CURRENT_VERSION }} to ${{ env.LATEST_VERSION }}

          - Updated navidrome image tag from ${{ env.CURRENT_VERSION }} to ${{ env.LATEST_VERSION }}
          - GitHub release: ${{ env.GITHUB_VERSION }}
          - Source: deluan/navidrome
          - Auto-generated by GitHub Action"
          
          git push

      - name: 📢 Create Notification Issue
        if: env.VERSION_UPDATED == 'true'
        run: |
          gh issue create \
            --title "Navidrome Updated: ${{ env.CURRENT_VERSION }} → ${{ env.LATEST_VERSION }}" \
            --body "Navidrome has been automatically updated!

          **Details:**
          - Previous Docker tag: \`${{ env.CURRENT_VERSION }}\`
          - New Docker tag: \`${{ env.LATEST_VERSION }}\`
          - GitHub release: \`${{ env.GITHUB_VERSION }}\`
          - Repository: deluan/navidrome
          - Updated at: $(date -u)

          The configuration has been updated and committed to the repository.

          **Commit:** ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}

          This issue was automatically created by GitHub Actions."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}