name: 📧 Email Smoke Tests

on:
  schedule:
    - cron: "0 0 * * *" # Every 5 mins
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read
  issues: write

jobs:
  mail-server-tests:
    name: 📧 Mail Server Configuration
    runs-on: ubuntu-latest
    outputs:
      mail-status: ${{ steps.mail-check.outputs.status }}
      mx-details: ${{ steps.mx-check.outputs.details }}
      spf-details: ${{ steps.spf-check.outputs.details }}
      dkim-details: ${{ steps.dkim-check.outputs.details }}
      dmarc-details: ${{ steps.dmarc-check.outputs.details }}
      detailed-diagnostics: ${{ steps.mail-check.outputs.detailed_diagnostics }}
    steps:
      - name: 🏗️ Setup
        uses: actions/checkout@v4

      - name: 🔍 Test MX Records
        id: mx-check
        run: |
          echo "🔍 Checking MX records for blit.cc..."
          mx_records=$(dig +short MX blit.cc)

          if [[ -z "$mx_records" ]]; then
            echo "❌ No MX records found for blit.cc"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "details=No MX records found for blit.cc" >> $GITHUB_OUTPUT
          else
            echo "✅ MX records for blit.cc:"
            echo "$mx_records"
            # Check for Fastmail MX records
            if echo "$mx_records" | grep -q "in[12]\.smtp\.messagingengine\.com"; then
              echo "✅ Fastmail MX records detected for blit.cc"
              echo "status=passed" >> $GITHUB_OUTPUT
              echo "details<<EOF" >> $GITHUB_OUTPUT
              echo "**MX Records Found:**" >> $GITHUB_OUTPUT
              echo '```' >> $GITHUB_OUTPUT
              echo "$mx_records" >> $GITHUB_OUTPUT
              echo '```' >> $GITHUB_OUTPUT

              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Expected Fastmail MX records not found for blit.cc"
              echo "status=failed" >> $GITHUB_OUTPUT
              echo "details<<EOF" >> $GITHUB_OUTPUT
              echo "**❌ Unexpected MX Records:**" >> $GITHUB_OUTPUT
              echo '```' >> $GITHUB_OUTPUT
              echo "$mx_records" >> $GITHUB_OUTPUT
              echo '```' >> $GITHUB_OUTPUT
              echo "**Expected:** Fastmail MX records (in1.smtp.messagingengine.com, in2.smtp.messagingengine.com)" >> $GITHUB_OUTPUT

              echo "EOF" >> $GITHUB_OUTPUT
            fi
          fi

          echo "mx_details<<EOF" >> $GITHUB_OUTPUT
          if [[ -z "$mx_records" ]]; then
            echo "No MX records found for blit.cc" >> $GITHUB_OUTPUT
          else
            echo "MX Records:" >> $GITHUB_OUTPUT
            echo "$mx_records" >> $GITHUB_OUTPUT
          fi
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🔐 Test SPF Records
        id: spf-check
        run: |
          echo "🔐 Checking SPF records for blit.cc..."
          spf_record=$(dig +short TXT blit.cc | grep "v=spf1")

          if [[ -z "$spf_record" ]]; then
            echo "❌ No SPF record found for blit.cc"
            echo "spf_status=failed" >> $GITHUB_OUTPUT
            echo "details<<EOF" >> $GITHUB_OUTPUT
            echo "**❌ No SPF record found for blit.cc**" >> $GITHUB_OUTPUT
            echo "**Expected:** TXT record containing 'v=spf1' with 'include:spf.messagingengine.com'" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "✅ SPF record for blit.cc: $spf_record"
            if echo "$spf_record" | grep -q "include:spf\.messagingengine\.com"; then
              echo "✅ Fastmail SPF include detected for blit.cc"
              echo "spf_status=passed" >> $GITHUB_OUTPUT
              echo "details<<EOF" >> $GITHUB_OUTPUT
              echo "**SPF Record Found:**" >> $GITHUB_OUTPUT
              echo '```' >> $GITHUB_OUTPUT
              echo "$spf_record" >> $GITHUB_OUTPUT
              echo '```' >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Expected Fastmail SPF include not found for blit.cc"
              echo "spf_status=failed" >> $GITHUB_OUTPUT
              echo "details<<EOF" >> $GITHUB_OUTPUT
              echo "**❌ SPF record missing Fastmail include:**" >> $GITHUB_OUTPUT
              echo '```' >> $GITHUB_OUTPUT
              echo "$spf_record" >> $GITHUB_OUTPUT
              echo '```' >> $GITHUB_OUTPUT
              echo "**Expected Include:** include:spf.messagingengine.com" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            fi
          fi

      - name: 🔑 Test DKIM Records
        id: dkim-check
        run: |
          echo "🔑 Checking DKIM records for blit.cc..."
          dkim_status="passed"

          echo "details<<EOF" >> $GITHUB_OUTPUT
          echo "**DKIM Selector Check Results:**" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT

          for selector in fm1 fm2 fm3 fm4; do
            dkim_record=$(dig +short TXT $selector._domainkey.blit.cc)

            if [[ -z "$dkim_record" ]]; then
              echo "❌ No DKIM record found for $selector._domainkey.blit.cc"
              dkim_status="failed"
              echo "**$selector._domainkey.blit.cc:** ❌ No record found" >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
            else
              echo "✅ DKIM record for $selector._domainkey.blit.cc found"
              echo "**$selector._domainkey.blit.cc:** ✅ Record found" >> $GITHUB_OUTPUT
              echo '```' >> $GITHUB_OUTPUT
              echo "$dkim_record" >> $GITHUB_OUTPUT
              echo '```' >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
            fi
          done

          echo "EOF" >> $GITHUB_OUTPUT
          echo "dkim_status=$dkim_status" >> $GITHUB_OUTPUT

      - name: 🛡️ Test DMARC Records
        id: dmarc-check
        run: |
          echo "🛡️ Checking DMARC records for blit.cc..."
          dmarc_record=$(dig +short TXT _dmarc.blit.cc | grep "v=DMARC1")

          if [[ -z "$dmarc_record" ]]; then
            echo "❌ No DMARC record found for blit.cc"
            echo "dmarc_status=failed" >> $GITHUB_OUTPUT
            echo "details<<EOF" >> $GITHUB_OUTPUT
            echo "**❌ No DMARC record found for _dmarc.blit.cc**" >> $GITHUB_OUTPUT
            echo "**Expected:** TXT record containing 'v=DMARC1'" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "✅ DMARC record for blit.cc: $dmarc_record"
            echo "dmarc_status=passed" >> $GITHUB_OUTPUT
            echo "details<<EOF" >> $GITHUB_OUTPUT
            echo "**DMARC Record Found:**" >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "$dmarc_record" >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Mail Server Status Summary
        id: mail-check
        run: |
          mx_status="${{ steps.mx-check.outputs.status }}"
          spf_status="${{ steps.spf-check.outputs.spf_status }}"
          dkim_status="${{ steps.dkim-check.outputs.dkim_status }}"
          dmarc_status="${{ steps.dmarc-check.outputs.dmarc_status }}"

          echo "🔍 Debug: MX=$mx_status, SPF=$spf_status, DKIM=$dkim_status, DMARC=$dmarc_status"

          # Collect detailed diagnostics
          detailed_diagnostics=""

          if [[ "$mx_status" == "failed" ]]; then
            detailed_diagnostics+="## 🔍 MX Records Issues"$'\n\n'
            detailed_diagnostics+="${{ steps.mx-check.outputs.details }}"$'\n\n'
          fi

          if [[ "$spf_status" == "failed" ]]; then
            detailed_diagnostics+="## 🔐 SPF Records Issues"$'\n\n'
            detailed_diagnostics+="${{ steps.spf-check.outputs.details }}"$'\n\n'
          fi

          if [[ "$dkim_status" == "failed" ]]; then
            detailed_diagnostics+="## 🔑 DKIM Records Issues"$'\n\n'
            detailed_diagnostics+="${{ steps.dkim-check.outputs.details }}"$'\n\n'
          fi

          if [[ "$dmarc_status" == "failed" ]]; then
            detailed_diagnostics+="## 🛡️ DMARC Records Issues"$'\n\n'
            detailed_diagnostics+="${{ steps.dmarc-check.outputs.details }}"$'\n\n'
          fi

          if [[ "$mx_status" == "failed" || "$spf_status" == "failed" || "$dkim_status" == "failed" || "$dmarc_status" == "failed" ]]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "❌ Mail server configuration has issues"

            echo "detailed_diagnostics<<EOF" >> $GITHUB_OUTPUT
            echo "$detailed_diagnostics" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            exit 1
          else
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "✅ All mail server configurations are healthy"
          fi

  issue-creator:
    name: 🚨 Issue Management
    runs-on: ubuntu-latest
    needs: [mail-server-tests]
    if: needs.mail-server-tests.outputs.mail-status == 'failed'
    steps:
      - name: 🚨 Create Mail Server Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = '🚨 Mail Server Configuration Issue Detected';
            const diagnostics = `${{ needs.mail-server-tests.outputs.detailed-diagnostics }}`;

            const body = `
            ## 📧 Mail Server Configuration Alert

            **Detected at:** ${new Date().toISOString()}
            **Triggered by:** ${context.eventName}
            **Workflow:** ${context.workflow}
            **Run:** [${context.runNumber}](${context.payload.repository?.html_url}/actions/runs/${context.runId})

            ### ❌ Issues Found

            The automated integration tests have detected issues with mail server configuration for **blit.cc**.

            ## 🔬 Detailed Diagnostics

            ${diagnostics || 'No detailed diagnostics available'}

            ### 🎯 Expected Configuration

            For **blit.cc** with Fastmail:

            **MX Records:**
            \`\`\`
            10 in1.messagingengine.com.
            20 in2.messagingengine.com.
            \`\`\`

            **SPF Record:**
            \`\`\`
            "v=spf1 include:spf.messagingengine.com ~all"
            \`\`\`

            **DKIM Selectors:**
            - fm1._domainkey.blit.cc
            - fm2._domainkey.blit.cc
            - fm3._domainkey.blit.cc
            - fm4._domainkey.blit.cc

            **DMARC Policy:**
            \`\`\`
            "v=DMARC1; p=none; rua=mailto:admin@blit.cc"
            \`\`\`

            ### 🛠️ Quick Diagnostic Commands

            \`\`\`bash
            # Check all mail configuration at once
            dig MX blit.cc
            dig TXT blit.cc | grep spf1
            dig TXT _dmarc.blit.cc

            # Check all DKIM selectors
            for selector in fm1 fm2 fm3 fm4; do
              echo "=== $selector ==="
              dig TXT $selector._domainkey.blit.cc
            done

            # Test mail deliverability
            echo "Subject: Test" | sendmail -f test@blit.cc your-email@domain.com
            \`\`\`

            ### 🏃‍♂️ Resolution Steps

            1. 🌐 **Check DNS Provider** - Verify records in your DNS management console
            2. 📮 **Update Routes Package** - Deploy Pulumi routes if DNS records need changes
            3. ⏰ **Wait for Propagation** - DNS changes can take up to 24-48 hours
            4. 🔄 **Re-run Tests** - Trigger this workflow again once changes are made
            5. 📧 **Test Email Delivery** - Send test emails to verify functionality

            ### 📊 Infrastructure Context

            - **Domain:** blit.cc
            - **Email Provider:** Fastmail
            - **DNS Management:** Cloudflare (via Pulumi routes package)
            - **Expected Propagation:** 5-10 minutes (Cloudflare) + up to 24h (global DNS)

            ---

            🤖 This issue was automatically created by the email integration test workflow.
            🔄 It will auto-close when mail server tests pass again.
            `;

            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['mail-server', 'automated'],
              state: 'open'
            });

            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['bug', 'mail-server', 'automated', 'high-priority']
              });
              console.log('🚨 Created new mail server issue');
            } else {
              console.log('📋 Mail server issue already exists, skipping creation');
            }

  close-fixed-issues:
    name: 🔔 Close Fixed Issues
    runs-on: ubuntu-latest
    needs: [mail-server-tests]
    if: needs.mail-server-tests.outputs.mail-status == 'passed'
    steps:
      - name: 🔔 Close Fixed Issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Close any open mail server issues if tests are now passing
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['mail-server', 'automated'],
              state: 'open'
            });

            for (const issue of issues.data) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '✅ Mail server tests are now passing. Auto-closing this issue.'
              });

              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }

  results:
    name: 📊 Results
    runs-on: ubuntu-latest
    needs: [mail-server-tests]
    if: always()
    steps:
      - name: 📈 Generate Test Summary
        run: |
          echo "## 📧 Email Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY

          mail_status="${{ needs.mail-server-tests.outputs.mail-status }}"
          echo "🔍 **Debug:** mail-status = '$mail_status'" >> $GITHUB_STEP_SUMMARY

          if [[ "$mail_status" == "passed" ]]; then
            echo "| 📧 Mail Servers (blit.cc) | ✅ Healthy |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 📧 Mail Servers (blit.cc) | ❌ Issues Detected |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Test Run:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "🏃 **Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
